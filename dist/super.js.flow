
declare export class AVLTree extends BinaryTree {

  get balanced(): boolean;
  _rotateLeft(node: TreeNode): TreeNode;
  _rotateRight(node: TreeNode): TreeNode;
  getBalance(node: ?TreeNode): number;
  insert(value: any): void;
  remove(value: any): void;
}

declare export class Array extends Array<any> {

  bubbleSort(comparator: any): Array<any>;
  constructor(iterable?: Array<any>): void;
  flatMap(callback: (value: any, index: number, array: Array<any>) => Array<any>): Array<any>;
  flatten(depth?: number): Array<any>;
  insertionSort(comparator: any): Array<any>;
  mergeSort(comparator: any): Array<any>;
  quickSort(comparator: any): Array<any>;
  selectionSort(comparator: any): Array<any>;
}

declare export class BinaryTree {
  static _defaultComparator(a: any, b: any): number | boolean;

  _compareEqual: any;
  _compareGreaterThan: any;
  _compareLessThan: any;
  _root: ?TreeNode;
  get height(): number;
  get root(): ?TreeNode;
  constructor(iterable?: Array<number>, comparator: any): void;
  findMax(node?: ?TreeNode): ?TreeNode;
  findMin(node?: ?TreeNode): ?TreeNode;
  getHeight(node?: ?TreeNode): number;
  inOrder(node?: ?TreeNode): Array<TreeNode>;
  insert(value: any): void;
  levelOrder(node?: ?TreeNode): Array<TreeNode>;
  postOrder(node?: ?TreeNode): Array<TreeNode>;
  preOrder(node?: ?TreeNode): Array<TreeNode>;
  remove(value: any): void;
  search(value: any): ?TreeNode;
  toArray(traversal: $Keys<{IN_ORDER: string, LEVEL_ORDER: string, POST_ORDER: string, PRE_ORDER: string}>, flatten?: boolean): Array<TreeNode | any>;
}
declare export var TraversalType: {IN_ORDER: string, LEVEL_ORDER: string, POST_ORDER: string, PRE_ORDER: string};

declare export class TreeNode {

  _left: ?TreeNode;
  _right: ?TreeNode;
  _value: any;
  get left(): ?TreeNode
  set left(value: ?TreeNode): void;
  get right(): ?TreeNode
  set right(value: ?TreeNode): void;
  get value(): any
  set value(value: any): void;
  constructor(value: any): void;
}

declare export function bubbleSort(arr: Array<any>, comparator?: any): Array<any>;

declare export class Heap {
  static HeapType: {MAX: (a: any, b: any) => number, MIN: (a: any, b: any) => number};
  static _defaultComparator(a: any, b: any): number | boolean;
  static _left(index: number): any;
  static _parent(index: number): any;
  static _right(index: number): any;

  _compare: any;
  _heap: Array<any>;
  get max(): any;
  get min(): any;
  get size(): number;
  _percolateDown(index: number): void;
  _percolateUp(index: number): void;
  clear(): void;
  constructor(iterable?: Array<any>, comparator: any): void;
  deleteMax(): any;
  deleteMin(): any;
  insert(value: any): number;
  isEmpty(): boolean;
  toArray(): Array<any>;
}

declare export function insertionSort(arr: Array<any>, comparator?: any): Array<any>;

declare export class LinkedList {

  _head: ?ListNode;
  _size: number;
  _tail: ?ListNode;
  get head(): ?ListNode;
  get size(): number;
  get tail(): ?ListNode;
  append(value: any): number;
  constructor(iterable?: Array<any>): void;
  insert(position: number, value: any): number;
  pop(): any;
  prepend(value: any): number;
  push(value: any): number;
  remove(position: number): any;
  shift(): any;
  toArray(): Array<any>;
  unshift(value: any): number;
}

declare export class ListNode {

  _next: ?ListNode;
  _prev: ?ListNode;
  _value: any;
  get next(): ?ListNode
  set next(value: ?ListNode): void;
  get prev(): ?ListNode
  set prev(value: ?ListNode): void;
  get value(): any
  set value(value: any): void;
  constructor(item: any): void;
}

declare export class Map extends Map<any, any> {

  constructor(iterable: Array<any>): any;
  every(callback: (value: any, key: any, map: Map<any, any>) => boolean): boolean;
  setDefault(key: any, defaultValue: any): any;
  some(callback: (value: any, key: any, map: Map<any, any>) => boolean): boolean;
  toObject(): any;
}

declare export var Math: {factorial: (num: number) => number};
declare export var _Math: {factorial: (num: number) => number};

declare export function mergeSort(arr: Array<any>, comparator?: any): Array<any | any>;

declare export class Number extends Number {
  static fromRomanNumeral(str: string): number;

  constructor(number: number): void;
  toRomanNumeral(): string;
}

declare export class Object extends Object {

  clone(config?: {includeNonEnumerable: ?boolean}): Object;
  constructor(object: Object): void;
  getNested(path: string): any;
  hasNested(path: string): boolean;
}

declare export class PriorityQueue {
  static _defaultComparator(a: any, b: any): number | boolean;
  static _wrapComparator(comparator: any): any;

  _comparator: any;
  _queue: Array<any>;
  get high(): any;
  get low(): any;
  get max(): any;
  get min(): any;
  get size(): number;
  clear(): void;
  constructor(iterable?: Map<number, any> | [any] | [[number, any]] | [{priority: number, value: any}], comparator: any): void;
  deleteHigh(): any;
  deleteLow(): any;
  deleteMax(): any;
  deleteMin(): any;
  insert(value: any, priority?: number): number;
  isEmpty(): boolean;
  toArray(): Array<any>;
}

declare export class QueueNode {

  _priority: number;
  _value: any;
  get priority(): number;
  get value(): any;
  constructor(value: any, priority: number): void;
}

declare export class Queue {

  _queue: Array<any>;
  get front(): any;
  get rear(): any;
  get size(): number;
  clear(): void;
  constructor(iterable?: Array<any>): void;
  dequeue(): any;
  enqueue(item: any): number;
  isEmpty(): boolean;
  toArray(): Array<any>;
}

declare export function quickSort(arr: Array<any>, comparator?: any): Array<any>;

declare export function selectionSort(arr: Array<any>, comparator?: any): Array<any>;

declare export class Set extends Set<any> {

  constructor(iterable: Array<any>): void;
  difference(setB: Set<any>): Set<any>;
  every(callback: (value1: any, value2: any, set: Set<any>) => boolean): boolean;
  intersection(setB: Set<any>): Set<any>;
  isSubset(setB: Set<any>): boolean;
  isSuperset(setB: Set<any>): boolean;
  some(callback: (value1: any, value2: any, set: Set<any>) => boolean): boolean;
  symmetricDifference(setB: Set<any>): Set<any>;
  union(setB: Set<any>): Set<any>;
}

declare export class String extends String {

  constructor(string: string): void;
  reverse(): string;
  reverseWords(): string;
  toTitleCase(): string;
}

declare export class Trie {

  _root: TrieNode;
  get root(): TrieNode;
  constructor(iterable?: Array<string>): void;
  contains(word: string): boolean;
  includes(word: string): boolean;
  insert(word: string): void;
  remove(word: string): boolean;
  search(query: string): {isCompleteWord: boolean, isMatch: boolean, matchedChars: number, node: ?TrieNode, query: string};
  startsWith(prefix: string): boolean;
}

declare export class TrieNode {

  _char: any;
  _children: Map<any, TrieNode>;
  _isCompleteWord: boolean;
  get char(): any;
  get count(): number;
  get isCompleteWord(): boolean;
  get isLeafNode(): boolean;
  constructor(char?: any): void;
  delete(char: any): void;
  get(char: any): ?TrieNode;
  has(char: any): boolean;
  set(char: any, node: TrieNode): void;
}

declare export function _compare(comparator: any): any;
declare export function _defaultComparator(a: any, b: any): number | boolean;
declare export function isIterable(item: any): boolean;
declare export function randInt(min: number, max: number): number;
declare export function swap(arr: Array<any>, a: any, b: any): void;
