
declare export class BinaryTree {
  static _defaultComparator(a: any, b: any): number | boolean;

  _compareEqual: any;
  _compareGreaterThan: any;
  _compareLessThan: any;
  _root: ?TreeNode;
  get height(): number;
  get root(): ?TreeNode;
  constructor(iterable?: Array<number>, comparator: any): void;
  findMax(node?: ?TreeNode): ?TreeNode;
  findMin(node?: ?TreeNode): ?TreeNode;
  getHeight(node?: ?TreeNode): number;
  inOrder(node?: ?TreeNode): Array<TreeNode>;
  insert(value: any): void;
  levelOrder(node?: ?TreeNode): Array<TreeNode>;
  postOrder(node?: ?TreeNode): Array<TreeNode>;
  preOrder(node?: ?TreeNode): Array<TreeNode>;
  remove(value: any): void;
  search(value: any): ?TreeNode;
  toArray(traversal: $Keys<{IN_ORDER: string, LEVEL_ORDER: string, POST_ORDER: string, PRE_ORDER: string}>, flatten?: boolean): Array<TreeNode | any>;
}
declare export var TraversalType: {IN_ORDER: string, LEVEL_ORDER: string, POST_ORDER: string, PRE_ORDER: string};
