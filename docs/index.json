[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "packages/Array/src/lib/Array.js",
    "content": "/**\n * @flow\n * @module super/array\n */\n\n/**\n * @typedef {Function} Callback\n */\ntype Callback = (value: any, index: number, array: Array) => Array;\n\n/**\n *\n * Array with superpowers! ðŸ’ª\n *\n * @public\n *\n */\nclass _Array extends Array {\n  /**\n   * @public\n   *\n   * @desc Construct an Array\n   *\n   * @param {Iterable} iterable\n   */\n  constructor(iterable: Iterable = []) {\n    super();\n    this.push(...iterable);\n  }\n  /**\n   * @public\n   *\n   * @desc Maps each element using a mapping function, then flattens the result into a new array\n   *\n   * @param {Callback} callback - callback function\n   * @returns {Array} A new array with each element being the result of the callback function and flattened to a depth of 1\n   */\n  flatMap(callback: (value: any, index: number, array: Array) => boolean): Array {\n    return this.map(callback).flatten();\n  }\n  /**\n   * @public\n   *\n   * @desc Creates a new array with all sub-array elements concatted into it recursively up to the specified depth\n   *\n   * @param {number} depth - flatten depth\n   * @returns {Array}  new array with the sub-array elements concatted into it.\n   */\n  flatten(depth: number = 1): Array {\n    function _flatten(depth, arr) {\n      if (depth <= 0) return arr;\n\n      return arr.reduce((acc, val) => {\n        if (Array.isArray(val)) return acc.concat(_flatten(depth - 1, val));\n        else return acc.concat(val);\n      }, []);\n    }\n    return _flatten(depth, this);\n  }\n}\nexport { _Array as Array };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/Array/src/lib/Array.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "_Array",
    "memberof": "packages/Array/src/lib/Array.js",
    "static": true,
    "longname": "packages/Array/src/lib/Array.js~_Array",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/Array/src/lib/Array.js",
    "importStyle": null,
    "description": "\nArray with superpowers! ðŸ’ª",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "Array"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/Array/src/lib/Array.js~_Array",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Array/src/lib/Array.js~_Array#constructor",
    "access": "public",
    "description": "Construct an Array",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "method",
    "name": "flatMap",
    "memberof": "packages/Array/src/lib/Array.js~_Array",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Array/src/lib/Array.js~_Array#flatMap",
    "access": "public",
    "description": "Maps each element using a mapping function, then flattens the result into a new array",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A new array with each element being the result of the callback function and flattened to a depth of 1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A new array with each element being the result of the callback function and flattened to a depth of 1"
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "flatten",
    "memberof": "packages/Array/src/lib/Array.js~_Array",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Array/src/lib/Array.js~_Array#flatten",
    "access": "public",
    "description": "Creates a new array with all sub-array elements concatted into it recursively up to the specified depth",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}  new array with the sub-array elements concatted into it."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "flatten depth"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "new array with the sub-array elements concatted into it."
    }
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "packages/LinkedList/src/lib/LinkedList.js",
    "content": "/**\n * @flow\n * @module super/linkedlist\n */\n\nimport { ListNode } from \"./ListNode\";\n\n/**\n *\n * LinkedList with superpowers! ðŸ’ª\n *\n * @public\n *\n */\nclass LinkedList {\n  /**\n   * @public\n   *\n   * @desc Construct a LinkedList\n   *\n   * @param {Iterable} iterable\n   */\n  constructor(iterable: Iterable = []) {\n    let head = new ListNode(0);\n    let prev = null;\n    let curr = head;\n    let size = 0;\n\n    for (let item of iterable) {\n      curr.next = new ListNode(item);\n      curr = curr.next;\n\n      curr.prev = prev;\n      prev = curr;\n\n      size++;\n    }\n\n    this._size = size;\n    this._head = head.next;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Get the head of the list\n   *\n   * @returns {ListNode} head node\n   */\n  get head(): ListNode {\n    return this._head;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Get the size of the list\n   *\n   * @returns {number} number of nodes in the list\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  // TODO:\n  // add (item: Item)\n  // searchNodeAt (position: number)\n  // remove (position: number)\n\n  /**\n   * @public\n   *\n   * @desc Convert the node and next nodes (recursively) to an array\n   *\n   * @returns {Array} array representation of the list\n   */\n  toArray(): Array {\n    let array = [];\n    let node = this.head;\n\n    while (node !== null) {\n      array.push(node.value);\n      node = node.next;\n    }\n\n    return array;\n  }\n}\n\nexport { LinkedList };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/LinkedList/src/lib/LinkedList.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "class",
    "name": "LinkedList",
    "memberof": "packages/LinkedList/src/lib/LinkedList.js",
    "static": true,
    "longname": "packages/LinkedList/src/lib/LinkedList.js~LinkedList",
    "access": "public",
    "export": true,
    "importPath": "@clarketm/super/packages/LinkedList/src/lib/LinkedList.js",
    "importStyle": "{LinkedList}",
    "description": "\nLinkedList with superpowers! ðŸ’ª",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 7,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/LinkedList/src/lib/LinkedList.js~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/LinkedList.js~LinkedList#constructor",
    "access": "public",
    "description": "Construct a LinkedList",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 8,
    "kind": "member",
    "name": "_size",
    "memberof": "packages/LinkedList/src/lib/LinkedList.js~LinkedList",
    "static": false,
    "longname": "packages/LinkedList/src/lib/LinkedList.js~LinkedList#_size",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "name": "_head",
    "memberof": "packages/LinkedList/src/lib/LinkedList.js~LinkedList",
    "static": false,
    "longname": "packages/LinkedList/src/lib/LinkedList.js~LinkedList#_head",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "get",
    "name": "head",
    "memberof": "packages/LinkedList/src/lib/LinkedList.js~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/LinkedList.js~LinkedList#head",
    "access": "public",
    "description": "Get the head of the list",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ListNode} head node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListNode"
      ],
      "spread": false,
      "description": "head node"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "get",
    "name": "size",
    "memberof": "packages/LinkedList/src/lib/LinkedList.js~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/LinkedList.js~LinkedList#size",
    "access": "public",
    "description": "Get the size of the list",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} number of nodes in the list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "number of nodes in the list"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "toArray",
    "memberof": "packages/LinkedList/src/lib/LinkedList.js~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/LinkedList.js~LinkedList#toArray",
    "access": "public",
    "description": "Convert the node and next nodes (recursively) to an array",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} array representation of the list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array representation of the list"
    },
    "params": []
  },
  {
    "__docId__": 13,
    "kind": "file",
    "name": "packages/LinkedList/src/lib/ListNode.js",
    "content": "/**\n * @flow\n * @module super/linkedlist\n */\n\nimport type { Item } from \"../../../shared/src/types\";\n\n/**\n *\n * ListNode\n *\n * @public\n *\n */\nclass ListNode {\n  /**\n   * @public\n   *\n   * @desc Construct a ListNode\n   *\n   * @param {Item} item - node value\n   */\n  constructor(item: Item) {\n    this.value = item;\n    this.prev = null;\n    this.next = null;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Get the value of the node\n   *\n   * @returns {Item} node value\n   */\n  get value(): Item {\n    return this._value;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Set the value of the node\n   *\n   */\n  set value(value: Item) {\n    this._value = value;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Get the next node in list\n   *\n   * @returns {ListNode} next node\n   */\n  get next(): ListNode {\n    return this._next;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Set the next node in list\n   *\n   */\n  set next(next: ListNode) {\n    this._next = next;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Get the previous node in list\n   *\n   * @returns {ListNode} previous node\n   */\n  get prev(): ListNode {\n    return this._prev;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Set the next node in list\n   *\n   */\n  set prev(prev: ListNode) {\n    this._prev = prev;\n  }\n}\n\nexport { ListNode };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/LinkedList/src/lib/ListNode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 14,
    "kind": "class",
    "name": "ListNode",
    "memberof": "packages/LinkedList/src/lib/ListNode.js",
    "static": true,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "access": "public",
    "export": true,
    "importPath": "@clarketm/super/packages/LinkedList/src/lib/ListNode.js",
    "importStyle": "{ListNode}",
    "description": "\nListNode",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 15,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#constructor",
    "access": "public",
    "description": "Construct a ListNode",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Item"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "node value"
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "get",
    "name": "value",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#value",
    "access": "public",
    "description": "Get the value of the node",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Item} node value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item"
      ],
      "spread": false,
      "description": "node value"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "set",
    "name": "value",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#value",
    "access": "public",
    "description": "Set the value of the node",
    "lineNumber": 41
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "_value",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#_value",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "get",
    "name": "next",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#next",
    "access": "public",
    "description": "Get the next node in list",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ListNode} next node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListNode"
      ],
      "spread": false,
      "description": "next node"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "set",
    "name": "next",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#next",
    "access": "public",
    "description": "Set the next node in list",
    "lineNumber": 62
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "_next",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#_next",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "get",
    "name": "prev",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#prev",
    "access": "public",
    "description": "Get the previous node in list",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ListNode} previous node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListNode"
      ],
      "spread": false,
      "description": "previous node"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "set",
    "name": "prev",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#prev",
    "access": "public",
    "description": "Set the next node in list",
    "lineNumber": 83
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "_prev",
    "memberof": "packages/LinkedList/src/lib/ListNode.js~ListNode",
    "static": false,
    "longname": "packages/LinkedList/src/lib/ListNode.js~ListNode#_prev",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "file",
    "name": "packages/Map/src/lib/Map.js",
    "content": "/**\n * @flow\n * @module super/map\n */\n\nimport type { Item } from \"../../../shared/src/types\";\nimport { PrimitiveType } from \"../../../shared/src/constants\";\n\n/**\n * @typedef {Function} Callback\n */\ntype Callback = (value: any, key: any, map: Map) => boolean;\n\n/**\n *\n * Map with superpowers! ðŸ’ª\n *\n * @public\n *\n */\nclass _Map extends Map {\n  /**\n   * @public\n   *\n   * @desc Construct a Map\n   *\n   * @param {Iterable} iterable\n   */\n  constructor(iterable: Iterable) {\n    super(iterable);\n  }\n  /**\n   * @public\n   *\n   * @desc Tests whether at least one element in the map passes the test implemented by the provided function\n   *\n   * @param {Callback} callback - callback function\n   * @returns {boolean} true if the callback function returns a truthy value for any map element; otherwise, false\n   */\n  some(callback: (value: any, key: any, map: Map) => boolean): boolean {\n    let result;\n\n    for (let [key, value] of this.entries()) {\n      result = callback(value, key, this);\n      if (result) return true;\n    }\n    return false;\n  }\n  /**\n   * @public\n   *\n   * @desc Test whether all elements in the map pass the test implemented by the provided function\n   *\n   * @param {Callback} callback - callback function\n   * @returns {boolean} true if the callback function returns a truthy value for every map element; otherwise, false\n   */\n  every(callback: (value: any, key: any, map: Map) => boolean): boolean {\n    let result;\n\n    for (let [key, value] of this.entries()) {\n      result = callback(value, key, this);\n      if (!result) return false;\n    }\n    return true;\n  }\n  /**\n   * @public\n   *\n   * @desc Similar to get(), but will set key to defaultValue if key is not already in Map.\n   *\n   * @param {Item} key - Map key\n   * @param {Item} defaultValue - the default value to set in Map if the key is not defined\n   * @returns {Item} The value if the key is defined in Map; otherwise, the default value\n   */\n  setDefault(key: Item, defaultValue: Item): Item {\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      this.set(key, defaultValue);\n      return defaultValue;\n    }\n  }\n  /**\n   * @public\n   *\n   * @desc Convert Map to an Object\n   *\n   * @returns {object} Object representation of Map\n   */\n  toObject() {\n    return Array.from(this).reduce((obj, [key, value]) => {\n      if (typeof key !== PrimitiveType.OBJECT) {\n        obj[key] = value;\n      }\n      return obj;\n    }, {});\n  }\n}\nexport { _Map as Map };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/Map/src/lib/Map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 29,
    "kind": "typedef",
    "name": "Callback",
    "memberof": "packages/Map/src/lib/Map.js",
    "static": true,
    "longname": "packages/Map/src/lib/Map.js~Callback",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "Callback"
    }
  },
  {
    "__docId__": 30,
    "kind": "class",
    "name": "_Map",
    "memberof": "packages/Map/src/lib/Map.js",
    "static": true,
    "longname": "packages/Map/src/lib/Map.js~_Map",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/Map/src/lib/Map.js",
    "importStyle": null,
    "description": "\nMap with superpowers! ðŸ’ª",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "Map"
    ]
  },
  {
    "__docId__": 31,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/Map/src/lib/Map.js~_Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Map/src/lib/Map.js~_Map#constructor",
    "access": "public",
    "description": "Construct a Map",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "some",
    "memberof": "packages/Map/src/lib/Map.js~_Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Map/src/lib/Map.js~_Map#some",
    "access": "public",
    "description": "Tests whether at least one element in the map passes the test implemented by the provided function",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the callback function returns a truthy value for any map element; otherwise, false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the callback function returns a truthy value for any map element; otherwise, false"
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "every",
    "memberof": "packages/Map/src/lib/Map.js~_Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Map/src/lib/Map.js~_Map#every",
    "access": "public",
    "description": "Test whether all elements in the map pass the test implemented by the provided function",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the callback function returns a truthy value for every map element; otherwise, false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the callback function returns a truthy value for every map element; otherwise, false"
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "setDefault",
    "memberof": "packages/Map/src/lib/Map.js~_Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Map/src/lib/Map.js~_Map#setDefault",
    "access": "public",
    "description": "Similar to get(), but will set key to defaultValue if key is not already in Map.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Item} The value if the key is defined in Map; otherwise, the default value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Item"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Map key"
      },
      {
        "nullable": null,
        "types": [
          "Item"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "the default value to set in Map if the key is not defined"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item"
      ],
      "spread": false,
      "description": "The value if the key is defined in Map; otherwise, the default value"
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "toObject",
    "memberof": "packages/Map/src/lib/Map.js~_Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Map/src/lib/Map.js~_Map#toObject",
    "access": "public",
    "description": "Convert Map to an Object",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Object representation of Map"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object representation of Map"
    },
    "params": []
  },
  {
    "__docId__": 36,
    "kind": "file",
    "name": "packages/Math/src/lib/Math.js",
    "content": "/**\n * @flow\n * @module super/math\n */\n\n/**\n *\n * Math with superpowers! ðŸ’ª\n *\n * @public\n *\n * @alias Math\n */\nexport const _Math = Object.create(Math);\n\n/**\n * @public\n *\n * @desc Factorial\n *\n * @param {number} num - integral number\n * @returns {number} factorial of num\n */\n_Math.factorial = function(num: number): Math {\n  if (num < 0) throw new Error(\"Factorial not defined for negative values\");\n  if (num === 0) return 1;\n  return num * _Math.factorial(num - 1);\n};\n\nexport { _Math as Math };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/Math/src/lib/Math.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 37,
    "kind": "variable",
    "name": "_Math",
    "memberof": "packages/Math/src/lib/Math.js",
    "static": true,
    "longname": "packages/Math/src/lib/Math.js~_Math",
    "access": "public",
    "export": true,
    "importPath": "@clarketm/super/packages/Math/src/lib/Math.js",
    "importStyle": "{_Math}",
    "description": "\nMath with superpowers! ðŸ’ª",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@alias",
        "tagValue": "Math"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "function",
    "name": "factorial",
    "memberof": "packages/Math/src/lib/Math.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/Math/src/lib/Math.js~factorial",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/Math/src/lib/Math.js",
    "importStyle": null,
    "description": "Factorial",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} factorial of num"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "integral number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "factorial of num"
    }
  },
  {
    "__docId__": 39,
    "kind": "file",
    "name": "packages/Number/src/lib/Number.js",
    "content": "/**\n * @flow\n * @module super/number\n */\n\nconst RomanNumeralToIntegerMap = new Map([\n  [\"M\", 1000],\n  [\"CM\", 900],\n  [\"D\", 500],\n  [\"CD\", 400],\n  [\"C\", 100],\n  [\"XC\", 90],\n  [\"L\", 50],\n  [\"XL\", 40],\n  [\"X\", 10],\n  [\"IX\", 9],\n  [\"V\", 5],\n  [\"IV\", 4],\n  [\"I\", 1]\n]);\n\nconst IntegerToRomanNumeralMap = new Map([\n  [1000, \"M\"],\n  [900, \"CM\"],\n  [500, \"D\"],\n  [400, \"CD\"],\n  [100, \"C\"],\n  [90, \"XC\"],\n  [50, \"L\"],\n  [40, \"XL\"],\n  [10, \"X\"],\n  [9, \"IX\"],\n  [5, \"V\"],\n  [4, \"IV\"],\n  [1, \"I\"]\n]);\n\n/**\n *\n * Number with superpowers! ðŸ’ª\n *\n * @public\n *\n */\nclass _Number extends Number {\n  /**\n   * @public\n   *\n   * @desc Construct a Number\n   *\n   * @param {number} number\n   */\n  constructor(number: Number) {\n    super(number);\n  }\n  /**\n   * @public\n   *\n   * @desc Convert a roman numeral to number\n   *\n   * @param {string} str - Roman numeral\n   * @returns {number} Number representation of a roman numeral\n   */\n  static fromRomanNumeral(str: string): Number {\n    function _romanToInteger(num, result = 0) {\n      // TODO: reduce iterations\n      for (let [roman, int] of RomanNumeralToIntegerMap) {\n        if (num.slice(0, roman.length) === roman) {\n          return _romanToInteger(num.slice(roman.length), result + int);\n        }\n      }\n      return result;\n    }\n    return _romanToInteger(str);\n  }\n  /**\n   * @public\n   *\n   * @desc Convert a number to roman numeral\n   *\n   * @returns {string} Roman numeral representation of number\n   */\n  toRomanNumeral(): String {\n    function _integerToRoman(num, result = \"\") {\n      // TODO: reduce iterations\n      for (let [int, roman] of IntegerToRomanNumeralMap) {\n        if (num >= int) return _integerToRoman(num - int, result + roman);\n      }\n      return result;\n    }\n    return _integerToRoman(this);\n  }\n}\nexport { _Number as Number };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/Number/src/lib/Number.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "name": "RomanNumeralToIntegerMap",
    "memberof": "packages/Number/src/lib/Number.js",
    "static": true,
    "longname": "packages/Number/src/lib/Number.js~RomanNumeralToIntegerMap",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/Number/src/lib/Number.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "super/number"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "variable",
    "name": "IntegerToRomanNumeralMap",
    "memberof": "packages/Number/src/lib/Number.js",
    "static": true,
    "longname": "packages/Number/src/lib/Number.js~IntegerToRomanNumeralMap",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/Number/src/lib/Number.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "class",
    "name": "_Number",
    "memberof": "packages/Number/src/lib/Number.js",
    "static": true,
    "longname": "packages/Number/src/lib/Number.js~_Number",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/Number/src/lib/Number.js",
    "importStyle": null,
    "description": "\nNumber with superpowers! ðŸ’ª",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "Number"
    ]
  },
  {
    "__docId__": 43,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/Number/src/lib/Number.js~_Number",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Number/src/lib/Number.js~_Number#constructor",
    "access": "public",
    "description": "Construct a Number",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "fromRomanNumeral",
    "memberof": "packages/Number/src/lib/Number.js~_Number",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/Number/src/lib/Number.js~_Number.fromRomanNumeral",
    "access": "public",
    "description": "Convert a roman numeral to number",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Number representation of a roman numeral"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "Roman numeral"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Number representation of a roman numeral"
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "toRomanNumeral",
    "memberof": "packages/Number/src/lib/Number.js~_Number",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Number/src/lib/Number.js~_Number#toRomanNumeral",
    "access": "public",
    "description": "Convert a number to roman numeral",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Roman numeral representation of number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Roman numeral representation of number"
    },
    "params": []
  },
  {
    "__docId__": 46,
    "kind": "file",
    "name": "packages/Object/src/lib/Object.js",
    "content": "/**\n * @flow\n * @module super/object\n */\n\nimport { InstanceType, PrimitiveType } from \"../../../shared/src/constants\";\nimport type { Item } from \"../../../shared/src/types\";\n\n/**\n * @typedef {object} Config\n * @property {boolean} [includeNonEnumerable=false]\n */\n\ntype Config = {\n  includeNonEnumerable: ?boolean\n};\n\n/**\n *\n * Object with superpowers! ðŸ’ª\n *\n * @public\n *\n */\nclass _Object extends Object {\n  /**\n   * @public\n   *\n   * @desc Construct an Object\n   *\n   * @param {Object} object\n   */\n  constructor(object: Object) {\n    super(object);\n  }\n\n  /**\n   * @public\n   *\n   * @desc Check for nested value from string key\n   *\n   * @param {string} path\n   * @return {boolean} property value exists\n   */\n  hasNested(path: string): boolean {\n    let item = this;\n    // TODO: throw error on invalid path\n    path = path.replace(/\\[(\\w+)\\]/, \".$1\").replace(/^\\./, \"\");\n\n    const keys = path.split(\".\");\n    for (let key of keys) {\n      if (typeof item === PrimitiveType.OBJECT && key in item) item = item[key];\n      else return false;\n    }\n    return true;\n  }\n\n  /**\n   * @public\n   *\n   * @desc  Get nested JavaScript object value from string key\n   *\n   * @param {string} path\n   * @return {Item} property value\n   */\n  getNested(path: string): Item {\n    let item = this;\n    // TODO: throw error on invalid path\n    path = path.replace(/\\[(\\w+)\\]/, \".$1\").replace(/^\\./, \"\");\n\n    const keys = path.split(\".\");\n    for (let key of keys) {\n      if (typeof item === PrimitiveType.OBJECT && key in item) item = item[key];\n      else return;\n    }\n    return item;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Deep clone an Object\n   *\n   * @param {Config} [config={}] Configuration object\n   * @returns {object} Deep cloned Object\n   *\n   * @example\n   *\n   * const obj = new SuperObject({ key1: [\"1\", 1, true, (a, b) => a+b], [Symbol(\"key2\")]: {s: \"s\"} });\n   * const clone = obj.clone();\n   *\n   * console.log(clone);\n   * // { key1: [\"1\", 1, true, (a, b) => a+b], Symbol(\"key2\"): {s: \"s\"} }\n   *\n   */\n  clone(config: Config = {}): Object {\n    const { includeNonEnumerable = false } = config;\n\n    /**\n     * @private\n     *\n     * @desc Deep clone helper\n     *\n     * @param {Item} item\n     * @returns {any} cloned item\n     */\n    function _clone(item: Item): Item {\n      if (item === null || typeof item !== PrimitiveType.OBJECT) {\n        return item;\n      }\n\n      if (item instanceof InstanceType.DATE) {\n        return new Date(item.valueOf());\n      }\n\n      if (item instanceof InstanceType.ARRAY) {\n        let copy = [];\n\n        item.forEach((_, i) => (copy[i] = _clone(item[i])));\n\n        return copy;\n      }\n\n      if (item instanceof InstanceType.OBJECT) {\n        let copy = {};\n\n        Object.getOwnPropertySymbols(item).forEach(s => (copy[s] = _clone(item[s])));\n\n        if (includeNonEnumerable) {\n          Object.getOwnPropertyNames(item).forEach(k => (copy[k] = _clone(item[k])));\n        } else {\n          Object.keys(item).forEach(k => (copy[k] = _clone(item[k])));\n        }\n\n        return copy;\n      }\n\n      throw new Error(`Unable to copy object: ${item}`);\n    }\n\n    return _clone(this, config);\n  }\n}\n\nexport { _Object as Object };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/Object/src/lib/Object.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 47,
    "kind": "typedef",
    "name": "Config",
    "memberof": "packages/Object/src/lib/Object.js",
    "static": true,
    "longname": "packages/Object/src/lib/Object.js~Config",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "includeNonEnumerable",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Config"
    }
  },
  {
    "__docId__": 48,
    "kind": "class",
    "name": "_Object",
    "memberof": "packages/Object/src/lib/Object.js",
    "static": true,
    "longname": "packages/Object/src/lib/Object.js~_Object",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/Object/src/lib/Object.js",
    "importStyle": null,
    "description": "\nObject with superpowers! ðŸ’ª",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "Object"
    ]
  },
  {
    "__docId__": 49,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/Object/src/lib/Object.js~_Object",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Object/src/lib/Object.js~_Object#constructor",
    "access": "public",
    "description": "Construct an Object",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "hasNested",
    "memberof": "packages/Object/src/lib/Object.js~_Object",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Object/src/lib/Object.js~_Object#hasNested",
    "access": "public",
    "description": "Check for nested value from string key",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "property value exists"
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "getNested",
    "memberof": "packages/Object/src/lib/Object.js~_Object",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Object/src/lib/Object.js~_Object#getNested",
    "access": "public",
    "description": " Get nested JavaScript object value from string key",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item"
      ],
      "spread": false,
      "description": "property value"
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "clone",
    "memberof": "packages/Object/src/lib/Object.js~_Object",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Object/src/lib/Object.js~_Object#clone",
    "access": "public",
    "description": "Deep clone an Object",
    "examples": [
      "\nconst obj = new SuperObject({ key1: [\"1\", 1, true, (a, b) => a+b], [Symbol(\"key2\")]: {s: \"s\"} });\nconst clone = obj.clone();\n\nconsole.log(clone);\n// { key1: [\"1\", 1, true, (a, b) => a+b], Symbol(\"key2\"): {s: \"s\"} }"
    ],
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Deep cloned Object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "config",
        "description": "Configuration object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Deep cloned Object"
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "packages/Queue/src/lib/Queue.js",
    "content": "/**\n * @flow\n * @module super/queue\n */\n\nimport type { Item } from \"../../../shared/src/types\";\n\n/**\n *\n * Queue with superpowers! ðŸ’ª\n *\n * @public\n *\n */\nclass Queue {\n  /**\n   * @public\n   *\n   * @desc Construct a Queue\n   *\n   * @param {Iterable} iterable\n   */\n  constructor(iterable: Iterable = []) {\n    this._queue = [...iterable];\n  }\n\n  /**\n   * @public\n   *\n   * @desc Get the current size of the queue\n   *\n   * @returns {number} size of the queue\n   */\n  get size(): number {\n    return this._queue.length;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Check if queue is empty\n   *\n   * @returns {boolean} is queue empty\n   */\n  isEmpty(): boolean {\n    return this._queue.length === 0;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Clear the items from the queue\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._queue.length = 0;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Enqueue an item into the queue\n   *\n   * @param {Item} item - item to enqueue\n   * @returns {number} length after enqueue\n   */\n  enqueue(item: Item): number {\n    return this._queue.push(item);\n  }\n\n  /**\n   * @public\n   *\n   * @desc Dequeue an item from the queue\n   *\n   * @returns {Item} dequeued item\n   */\n  dequeue(): Item {\n    return this._queue.shift();\n  }\n\n  /**\n   * @public\n   *\n   * @desc Get the front item in the queue\n   *\n   * @returns {Item} front item\n   */\n  front(): Item {\n    return this._queue[0];\n  }\n\n  /**\n   * @public\n   *\n   * @desc Get the rear item in the queue\n   *\n   * @returns {Item} rear item\n   */\n  rear(): Item {\n    return this._queue[this._queue.length - 1];\n  }\n\n  /**\n   * @public\n   *\n   * @desc Convert the queue to an array\n   *\n   * @returns {Array} array representation of the queue\n   */\n  toArray(): Array {\n    return this._queue.slice(0);\n  }\n}\n\nexport { Queue };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/Queue/src/lib/Queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "Queue",
    "memberof": "packages/Queue/src/lib/Queue.js",
    "static": true,
    "longname": "packages/Queue/src/lib/Queue.js~Queue",
    "access": "public",
    "export": true,
    "importPath": "@clarketm/super/packages/Queue/src/lib/Queue.js",
    "importStyle": "{Queue}",
    "description": "\nQueue with superpowers! ðŸ’ª",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#constructor",
    "access": "public",
    "description": "Construct a Queue",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_queue",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#_queue",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "get",
    "name": "size",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#size",
    "access": "public",
    "description": "Get the current size of the queue",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} size of the queue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "size of the queue"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#isEmpty",
    "access": "public",
    "description": "Check if queue is empty",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} is queue empty"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "is queue empty"
    },
    "params": []
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "clear",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#clear",
    "access": "public",
    "description": "Clear the items from the queue",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "enqueue",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#enqueue",
    "access": "public",
    "description": "Enqueue an item into the queue",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} length after enqueue"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Item"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "item to enqueue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "length after enqueue"
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "dequeue",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#dequeue",
    "access": "public",
    "description": "Dequeue an item from the queue",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Item} dequeued item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item"
      ],
      "spread": false,
      "description": "dequeued item"
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "front",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#front",
    "access": "public",
    "description": "Get the front item in the queue",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Item} front item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item"
      ],
      "spread": false,
      "description": "front item"
    },
    "params": []
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "rear",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#rear",
    "access": "public",
    "description": "Get the rear item in the queue",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Item} rear item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item"
      ],
      "spread": false,
      "description": "rear item"
    },
    "params": []
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "toArray",
    "memberof": "packages/Queue/src/lib/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Queue/src/lib/Queue.js~Queue#toArray",
    "access": "public",
    "description": "Convert the queue to an array",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} array representation of the queue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array representation of the queue"
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "packages/Set/src/lib/Set.js",
    "content": "/**\n * @flow\n * @module super/set\n */\n\n/**\n * @typedef {Function} Callback\n */\ntype Callback = (value1: any, value2: any, set: Set) => boolean;\n\n/**\n *\n * Set with superpowers! ðŸ’ª\n *\n * @public\n *\n */\nclass _Set extends Set {\n  /**\n   * @public\n   *\n   * @desc Construct a Set\n   *\n   * @param {Iterable} iterable\n   */\n  constructor(iterable: Iterable) {\n    super(iterable);\n  }\n\n  /**\n   * @public\n   *\n   * @desc Tests whether at least one element in the set passes the test implemented by the provided function\n   *\n   * @param {Callback} callback - callback function\n   * @returns {boolean} true if the callback function returns a truthy value for any set element; otherwise, false\n   */\n  some(callback: (value1: any, value2: any, set: Set) => boolean): boolean {\n    let result;\n\n    for (let [value1, value2] of this.entries()) {\n      result = callback(value1, value2, this);\n      if (result) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Test whether all elements in the set pass the test implemented by the provided function\n   *\n   * @param {Callback} callback - callback function\n   * @returns {boolean} true if the callback function returns a truthy value for every set element; otherwise, false\n   */\n  every(callback: (value1: any, value2: any, set: Set) => boolean): boolean {\n    let result;\n\n    for (let [value1, value2] of this.entries()) {\n      result = callback(value1, value2, this);\n      if (!result) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Subset of a set\n   *\n   * @param {Set} setB - SetB\n   * @returns {boolean} setA is subset of setB\n   */\n  isSubset(setB: Set): boolean {\n    let setA = this;\n\n    for (let v of setA) {\n      if (!setB.has(v)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Superset of a set\n   *\n   * @param {Set} setB - SetB\n   * @returns {boolean} setA is superset of setB\n   */\n  isSuperset(setB: Set): boolean {\n    let setA = this;\n\n    for (let v of setB) {\n      if (!setA.has(v)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Union of setA and setB\n   *\n   * @param {Set} setB - SetB\n   * @returns {Set} setC - union between setA and setB\n   */\n  union(setB: Set): Set {\n    let setA = this;\n    let setC = new Set(setA);\n\n    for (let v of setB) {\n      setC.add(v);\n    }\n\n    return setC;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Intersection of setA and setB\n   *\n   * @param {Set} setB - SetB\n   * @returns {Set} setC - intersection between setA and setB\n   */\n  intersection(setB: Set): Set {\n    let setA = this;\n    let setC = new Set();\n\n    for (let v of setB) {\n      if (setA.has(v)) setC.add(v);\n    }\n\n    return setC;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Difference of setA and setB\n   *\n   * @param {Set} setB - SetB\n   * @returns {Set} setC - difference between setA and setB\n   */\n  difference(setB: Set): Set {\n    let setA = this;\n    let setC = new Set(setA);\n\n    for (let v of setB) {\n      setC.delete(v);\n    }\n\n    return setC;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Symmetric difference of setA and setB\n   *\n   * @param {Set} setB - SetB\n   * @returns {Set} setC - difference difference between setA and setB\n   */\n  symmetricDifference(setB: Set): Set {\n    let setA = this;\n    let setC = new Set(setA);\n\n    for (let v of setB) {\n      if (setA.has(v)) setC.delete(v);\n      else setC.add(v);\n    }\n\n    return setC;\n  }\n}\n\nexport { _Set as Set };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/Set/src/lib/Set.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "_Set",
    "memberof": "packages/Set/src/lib/Set.js",
    "static": true,
    "longname": "packages/Set/src/lib/Set.js~_Set",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/Set/src/lib/Set.js",
    "importStyle": null,
    "description": "\nSet with superpowers! ðŸ’ª",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "Set"
    ]
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#constructor",
    "access": "public",
    "description": "Construct a Set",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "some",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#some",
    "access": "public",
    "description": "Tests whether at least one element in the set passes the test implemented by the provided function",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the callback function returns a truthy value for any set element; otherwise, false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the callback function returns a truthy value for any set element; otherwise, false"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "every",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#every",
    "access": "public",
    "description": "Test whether all elements in the set pass the test implemented by the provided function",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the callback function returns a truthy value for every set element; otherwise, false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the callback function returns a truthy value for every set element; otherwise, false"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "isSubset",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#isSubset",
    "access": "public",
    "description": "Subset of a set",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} setA is subset of setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "setA is subset of setB"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "isSuperset",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#isSuperset",
    "access": "public",
    "description": "Superset of a set",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} setA is superset of setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "setA is superset of setB"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "union",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#union",
    "access": "public",
    "description": "Union of setA and setB",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set} setC - union between setA and setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "setC - union between setA and setB"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "intersection",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#intersection",
    "access": "public",
    "description": "Intersection of setA and setB",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set} setC - intersection between setA and setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "setC - intersection between setA and setB"
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "difference",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#difference",
    "access": "public",
    "description": "Difference of setA and setB",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set} setC - difference between setA and setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "setC - difference between setA and setB"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "symmetricDifference",
    "memberof": "packages/Set/src/lib/Set.js~_Set",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/Set/src/lib/Set.js~_Set#symmetricDifference",
    "access": "public",
    "description": "Symmetric difference of setA and setB",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set} setC - difference difference between setA and setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "setC - difference difference between setA and setB"
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "packages/String/src/lib/String.js",
    "content": "/**\n * @flow\n * @module super/string\n */\n\n/**\n *\n * String with superpowers! ðŸ’ª\n *\n * @public\n *\n */\nclass _String extends String {\n  /**\n   * @public\n   *\n   * @desc Construct a String\n   *\n   * @param {string} string\n   */\n  constructor(string: String) {\n    super(string);\n  }\n\n  /**\n   * @public\n   *\n   * @desc Transposes the ordering of all characters in the string\n   *\n   * @returns {string} String reversed\n   */\n  reverse(): String {\n    return this.split(\"\")\n      .filter(s => s)\n      .reverse()\n      .join(\"\");\n  }\n\n  /**\n   * @public\n   *\n   * @desc Transposes the ordering of the words in the string\n   *\n   * @returns {string} String with words reversed\n   */\n  reverseWords(): String {\n    return this.split(\" \")\n      .filter(s => s)\n      .reverse()\n      .join(\" \");\n  }\n\n  /**\n   * @public\n   *\n   * @desc Convert a string to title case\n   *\n   * @returns {string} Title cased string representation\n   */\n  toTitleCase(): String {\n    return this.split(\" \")\n      .map(v => v && v.charAt(0).toUpperCase() + v.substr(1).toLowerCase())\n      .join(\" \");\n  }\n}\n\nexport { _String as String };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/String/src/lib/String.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "class",
    "name": "_String",
    "memberof": "packages/String/src/lib/String.js",
    "static": true,
    "longname": "packages/String/src/lib/String.js~_String",
    "access": "public",
    "export": false,
    "importPath": "@clarketm/super/packages/String/src/lib/String.js",
    "importStyle": null,
    "description": "\nString with superpowers! ðŸ’ª",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "String"
    ]
  },
  {
    "__docId__": 78,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/String/src/lib/String.js~_String",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/String/src/lib/String.js~_String#constructor",
    "access": "public",
    "description": "Construct a String",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "reverse",
    "memberof": "packages/String/src/lib/String.js~_String",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/String/src/lib/String.js~_String#reverse",
    "access": "public",
    "description": "Transposes the ordering of all characters in the string",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} String reversed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String reversed"
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "reverseWords",
    "memberof": "packages/String/src/lib/String.js~_String",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/String/src/lib/String.js~_String#reverseWords",
    "access": "public",
    "description": "Transposes the ordering of the words in the string",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} String with words reversed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String with words reversed"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "toTitleCase",
    "memberof": "packages/String/src/lib/String.js~_String",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/String/src/lib/String.js~_String#toTitleCase",
    "access": "public",
    "description": "Convert a string to title case",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Title cased string representation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Title cased string representation"
    },
    "params": []
  },
  {
    "kind": "index",
    "content": "# Super\n\n**Data Structures** with superpowers! ðŸ’ª\n\n## Data Structures\n\n* [Array](https://github.com/clarketm/super/tree/master/packages/Array#readme)\n* [LinkedList](https://github.com/clarketm/super/tree/master/packages/LinkedList#readme)\n* [Map](https://github.com/clarketm/super/tree/master/packages/Map#readme)\n* [Math](https://github.com/clarketm/super/tree/master/packages/Math#readme)\n* [Number](https://github.com/clarketm/super/tree/master/packages/Number#readme)\n* [Object](https://github.com/clarketm/super/tree/master/packages/Object#readme)\n* [Queue](https://github.com/clarketm/super/tree/master/packages/Queue#readme)\n* [Set](https://github.com/clarketm/super/tree/master/packages/Set#readme)\n* [String](https://github.com/clarketm/super/tree/master/packages/String#readme)\n\n### Misc.\n\n* [babel-preset-super](https://github.com/clarketm/super/tree/master/packages/babel-preset-super#readme)\n* [eslint-config-super](https://github.com/clarketm/super/tree/master/packages/eslint-config-super#readme)\n* [generator-super](https://github.com/clarketm/super/tree/master/packages/generator-super#readme)\n",
    "longname": "/Users/clarketm/js/super/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]