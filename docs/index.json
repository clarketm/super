[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "packages/supermap/src/lib/SuperMap.js",
    "content": "// @flow\n\nimport { PrimitiveType } from \"../../../shared/src/constants\";\n\n/**\n * @module supermap\n *\n */\n\n/**\n * @typedef {Function} Callback\n */\ntype Callback = (value: any, key: any, map: Map) => boolean\n\n/**\n *\n * Map with superpowers! ðŸ’ª\n *\n * @public\n *\n * @extends {Map}\n */\nexport class SuperMap extends Map {\n  /**\n   * @public\n   *\n   * @desc Construct a Map\n   *\n   * @param {Iterable} iterable\n   */\n  constructor(iterable: Iterable) {\n    super(iterable);\n  }\n\n  /**\n   * @public\n   *\n   * @desc Tests whether at least one element in the map passes the test implemented by the provided function\n   *\n   * @param {Callback} callback - callback function\n   * @returns {boolean} true if the callback function returns a truthy value for any map element; otherwise, false\n   */\n  some(callback: (value: any, key: any, map: Map) => boolean): boolean {\n    let result;\n\n    for (let [key, value] of this.entries()) {\n      result = callback(value, key, this);\n      if (result) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Test whether all elements in the map pass the test implemented by the provided function\n   *\n   * @param {Callback} callback - callback function\n   * @returns {boolean} true if the callback function returns a truthy value for every map element; otherwise, false\n   */\n  every(callback: (value: any, key: any, map: Map) => boolean): boolean {\n    let result;\n\n    for (let [key, value] of this.entries()) {\n      result = callback(value, key, this);\n      if (!result) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Convert Map to an Object\n   *\n   * @returns {object} Object representation of Map\n   */\n  toObject() {\n    return Array.from(this).reduce((obj, [key, value]) => {\n      if (typeof key !== PrimitiveType.OBJECT) {\n        obj[key] = value;\n      }\n      return obj;\n    }, {});\n  }\n}\n\n// export { SuperMap as Map };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/supermap/src/lib/SuperMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "typedef",
    "name": "Callback",
    "memberof": "packages/supermap/src/lib/SuperMap.js",
    "static": true,
    "longname": "packages/supermap/src/lib/SuperMap.js~Callback",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "Callback"
    }
  },
  {
    "__docId__": 2,
    "kind": "class",
    "name": "SuperMap",
    "memberof": "packages/supermap/src/lib/SuperMap.js",
    "static": true,
    "longname": "packages/supermap/src/lib/SuperMap.js~SuperMap",
    "access": "public",
    "export": true,
    "importPath": "@clarketm/supertypes/packages/supermap/src/lib/SuperMap.js",
    "importStyle": "{SuperMap}",
    "description": "\nMap with superpowers! ðŸ’ª",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "Map"
    ]
  },
  {
    "__docId__": 3,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/supermap/src/lib/SuperMap.js~SuperMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/supermap/src/lib/SuperMap.js~SuperMap#constructor",
    "access": "public",
    "description": "Construct a Map",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "some",
    "memberof": "packages/supermap/src/lib/SuperMap.js~SuperMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/supermap/src/lib/SuperMap.js~SuperMap#some",
    "access": "public",
    "description": "Tests whether at least one element in the map passes the test implemented by the provided function",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the callback function returns a truthy value for any map element; otherwise, false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the callback function returns a truthy value for any map element; otherwise, false"
    }
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "every",
    "memberof": "packages/supermap/src/lib/SuperMap.js~SuperMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/supermap/src/lib/SuperMap.js~SuperMap#every",
    "access": "public",
    "description": "Test whether all elements in the map pass the test implemented by the provided function",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the callback function returns a truthy value for every map element; otherwise, false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the callback function returns a truthy value for every map element; otherwise, false"
    }
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "toObject",
    "memberof": "packages/supermap/src/lib/SuperMap.js~SuperMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/supermap/src/lib/SuperMap.js~SuperMap#toObject",
    "access": "public",
    "description": "Convert Map to an Object",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Object representation of Map"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object representation of Map"
    },
    "params": []
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "packages/superobject/src/lib/SuperObject.js",
    "content": "// @flow\n\nimport { InstanceType, PrimitiveType } from \"../../../shared/src/constants\";\n\n/**\n * @module superobject\n *\n */\n\n/**\n * @typedef {object} Config\n * @property {boolean} [includeNonEnumerable=false]\n */\n\ntype Config = {\n  includeNonEnumerable: ?boolean\n};\n\n/**\n * @typedef {null|undefined|boolean|number|string|Symbol|Function|Array|Date|Object} Item\n */\n\ntype Item =\n  | null\n  | undefined\n  | boolean\n  | number\n  | string\n  | Symbol\n  | Function\n  | Array\n  | Date\n  | Object;\n\n/**\n *\n * Object with superpowers! ðŸ’ª\n *\n * @public\n *\n * @extends {Object}\n */\nexport class SuperObject extends Object {\n  /**\n   * @public\n   *\n   * @desc Construct an Object\n   *\n   * @param {Object} object\n   */\n  constructor(object: Object) {\n    super(object);\n  }\n\n  /**\n   * @public\n   *\n   * @desc Check for nested value from string key\n   *\n   * @param {string} path\n   * @return {boolean} property value exists\n   */\n  hasNested(path: string): boolean {\n    let item = this;\n    // TODO: throw error on invalid path\n    path = path.replace(/\\[(\\w+)\\]/, \".$1\").replace(/^\\./, \"\");\n\n    const keys = path.split(\".\");\n    for (let key of keys) {\n      if (typeof item === PrimitiveType.OBJECT && key in item) item = item[key];\n      else return false;\n    }\n    return true;\n  }\n\n  /**\n   * @public\n   *\n   * @desc  Get nested JavaScript object value from string key\n   *\n   * @param {string} path\n   * @return {Item} property value\n   */\n  getNested(path: string): Item {\n    let item = this;\n    // TODO: throw error on invalid path\n    path = path.replace(/\\[(\\w+)\\]/, \".$1\").replace(/^\\./, \"\");\n\n    const keys = path.split(\".\");\n    for (let key of keys) {\n      if (typeof item === PrimitiveType.OBJECT && key in item) item = item[key];\n      else return;\n    }\n    return item;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Deep clone an Object\n   *\n   * @param {Config} [config={}] Configuration object\n   * @returns {object} Deep cloned Object\n   *\n   * @example\n   *\n   * const obj = new SuperObject({ key1: [\"1\", 1, true, (a, b) => a+b], [Symbol(\"key2\")]: {s: \"s\"} });\n   * const clone = obj.clone();\n   *\n   * console.log(clone);\n   * // { key1: [\"1\", 1, true, (a, b) => a+b], Symbol(\"key2\"): {s: \"s\"} }\n   *\n   */\n  clone(config: Config = {}): Object {\n    const { includeNonEnumerable = false } = config;\n\n    /**\n     * @private\n     *\n     * @desc Deep clone helper\n     *\n     * @param {Item} item\n     * @returns {any} cloned item\n     */\n    function _clone(item: Item): Item {\n      if (item === null || typeof item !== PrimitiveType.OBJECT) {\n        return item;\n      }\n\n      if (item instanceof InstanceType.DATE) {\n        return new Date(item.valueOf());\n      }\n\n      if (item instanceof InstanceType.ARRAY) {\n        let copy = [];\n\n        item.forEach((_, i) => (copy[i] = _clone(item[i])));\n\n        return copy;\n      }\n\n      if (item instanceof InstanceType.OBJECT) {\n        let copy = {};\n\n        Object.getOwnPropertySymbols(item).forEach(\n          s => (copy[s] = _clone(item[s]))\n        );\n\n        if (includeNonEnumerable) {\n          Object.getOwnPropertyNames(item).forEach(\n            k => (copy[k] = _clone(item[k]))\n          );\n        } else {\n          Object.keys(item).forEach(k => (copy[k] = _clone(item[k])));\n        }\n\n        return copy;\n      }\n\n      throw new Error(`Unable to copy object: ${item}`);\n    }\n\n    return _clone(this, config);\n  }\n}\n\n// export { SuperObject as Object };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/superobject/src/lib/SuperObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "typedef",
    "name": "Config",
    "memberof": "packages/superobject/src/lib/SuperObject.js",
    "static": true,
    "longname": "packages/superobject/src/lib/SuperObject.js~Config",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "includeNonEnumerable",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Config"
    }
  },
  {
    "__docId__": 9,
    "kind": "typedef",
    "name": "Item",
    "memberof": "packages/superobject/src/lib/SuperObject.js",
    "static": true,
    "longname": "packages/superobject/src/lib/SuperObject.js~Item",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "null",
        "undefined",
        "boolean",
        "number",
        "string",
        "Symbol",
        "Function",
        "Array",
        "Date",
        "Object"
      ],
      "optional": false,
      "name": "Item"
    }
  },
  {
    "__docId__": 10,
    "kind": "class",
    "name": "SuperObject",
    "memberof": "packages/superobject/src/lib/SuperObject.js",
    "static": true,
    "longname": "packages/superobject/src/lib/SuperObject.js~SuperObject",
    "access": "public",
    "export": true,
    "importPath": "@clarketm/supertypes/packages/superobject/src/lib/SuperObject.js",
    "importStyle": "{SuperObject}",
    "description": "\nObject with superpowers! ðŸ’ª",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "Object"
    ]
  },
  {
    "__docId__": 11,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/superobject/src/lib/SuperObject.js~SuperObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superobject/src/lib/SuperObject.js~SuperObject#constructor",
    "access": "public",
    "description": "Construct an Object",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "hasNested",
    "memberof": "packages/superobject/src/lib/SuperObject.js~SuperObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superobject/src/lib/SuperObject.js~SuperObject#hasNested",
    "access": "public",
    "description": "Check for nested value from string key",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "property value exists"
    }
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "getNested",
    "memberof": "packages/superobject/src/lib/SuperObject.js~SuperObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superobject/src/lib/SuperObject.js~SuperObject#getNested",
    "access": "public",
    "description": " Get nested JavaScript object value from string key",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item"
      ],
      "spread": false,
      "description": "property value"
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "clone",
    "memberof": "packages/superobject/src/lib/SuperObject.js~SuperObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superobject/src/lib/SuperObject.js~SuperObject#clone",
    "access": "public",
    "description": "Deep clone an Object",
    "examples": [
      "\nconst obj = new SuperObject({ key1: [\"1\", 1, true, (a, b) => a+b], [Symbol(\"key2\")]: {s: \"s\"} });\nconst clone = obj.clone();\n\nconsole.log(clone);\n// { key1: [\"1\", 1, true, (a, b) => a+b], Symbol(\"key2\"): {s: \"s\"} }"
    ],
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Deep cloned Object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "config",
        "description": "Configuration object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Deep cloned Object"
    }
  },
  {
    "__docId__": 15,
    "kind": "file",
    "name": "packages/superset/src/lib/SuperSet.js",
    "content": "// @flow\n\n/**\n * @module superset\n *\n */\n\n/**\n *\n * Set with superpowers! ðŸ’ª\n *\n * @public\n *\n * @extends {Set}\n */\nexport class SuperSet extends Set {\n  /**\n   * @public\n   *\n   * @desc Construct a Set\n   *\n   * @param {Iterable} iterable\n   */\n  constructor(iterable: Iterable) {\n    super(iterable);\n  }\n\n  /**\n   * @public\n   *\n   * @desc Subset of a set\n   *\n   * @param {Set} setB - SetB\n   * @returns {boolean} setA is subset of setB\n   */\n  isSubset(setB: Set): boolean {\n    let setA = this;\n\n    for (let v of setA) {\n      if (!setB.has(v)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Superset of a set\n   *\n   * @param {Set} setB - SetB\n   * @returns {boolean} setA is superset of setB\n   */\n  isSuperset(setB: Set): boolean {\n    let setA = this;\n\n    for (let v of setB) {\n      if (!setA.has(v)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Union of setA and setB\n   *\n   * @param {Set} setB - SetB\n   * @returns {Set} setC - union between setA and setB\n   */\n  union(setB: Set): Set {\n    let setA = this;\n    let setC = new Set(setA);\n\n    for (let v of setB) {\n      setC.add(v);\n    }\n\n    return setC;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Intersection of setA and setB\n   *\n   * @param {Set} setB - SetB\n   * @returns {Set} setC - intersection between setA and setB\n   */\n  intersection(setB: Set): Set {\n    let setA = this;\n    let setC = new Set();\n\n    for (let v of setB) {\n      if (setA.has(v)) setC.add(v);\n    }\n\n    return setC;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Difference of setA and setB\n   *\n   * @param {Set} setB - SetB\n   * @returns {Set} setC - difference between setA and setB\n   */\n  difference(setB: Set): Set {\n    let setA = this;\n    let setC = new Set(setA);\n\n    for (let v of setB) {\n      setC.delete(v);\n    }\n\n    return setC;\n  }\n\n  /**\n   * @public\n   *\n   * @desc Symmetric difference of setA and setB\n   *\n   * @param {Set} setB - SetB\n   * @returns {Set} setC - difference difference between setA and setB\n   */\n  symmetricDifference(setB: Set): Set {\n    let setA = this;\n    let setC = new Set(setA);\n\n    for (let v of setB) {\n      if (setA.has(v)) setC.delete(v);\n      else setC.add(v);\n    }\n\n    return setC;\n  }\n}\n\n// export { SuperSet as Set };\n",
    "static": true,
    "longname": "/Users/clarketm/js/super/packages/superset/src/lib/SuperSet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 16,
    "kind": "class",
    "name": "SuperSet",
    "memberof": "packages/superset/src/lib/SuperSet.js",
    "static": true,
    "longname": "packages/superset/src/lib/SuperSet.js~SuperSet",
    "access": "public",
    "export": true,
    "importPath": "@clarketm/supertypes/packages/superset/src/lib/SuperSet.js",
    "importStyle": "{SuperSet}",
    "description": "\nSet with superpowers! ðŸ’ª",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "Set"
    ]
  },
  {
    "__docId__": 17,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/superset/src/lib/SuperSet.js~SuperSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superset/src/lib/SuperSet.js~SuperSet#constructor",
    "access": "public",
    "description": "Construct a Set",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "isSubset",
    "memberof": "packages/superset/src/lib/SuperSet.js~SuperSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superset/src/lib/SuperSet.js~SuperSet#isSubset",
    "access": "public",
    "description": "Subset of a set",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} setA is subset of setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "setA is subset of setB"
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "isSuperset",
    "memberof": "packages/superset/src/lib/SuperSet.js~SuperSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superset/src/lib/SuperSet.js~SuperSet#isSuperset",
    "access": "public",
    "description": "Superset of a set",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} setA is superset of setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "setA is superset of setB"
    }
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "union",
    "memberof": "packages/superset/src/lib/SuperSet.js~SuperSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superset/src/lib/SuperSet.js~SuperSet#union",
    "access": "public",
    "description": "Union of setA and setB",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set} setC - union between setA and setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "setC - union between setA and setB"
    }
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "intersection",
    "memberof": "packages/superset/src/lib/SuperSet.js~SuperSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superset/src/lib/SuperSet.js~SuperSet#intersection",
    "access": "public",
    "description": "Intersection of setA and setB",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set} setC - intersection between setA and setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "setC - intersection between setA and setB"
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "difference",
    "memberof": "packages/superset/src/lib/SuperSet.js~SuperSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superset/src/lib/SuperSet.js~SuperSet#difference",
    "access": "public",
    "description": "Difference of setA and setB",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set} setC - difference between setA and setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "setC - difference between setA and setB"
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "symmetricDifference",
    "memberof": "packages/superset/src/lib/SuperSet.js~SuperSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/superset/src/lib/SuperSet.js~SuperSet#symmetricDifference",
    "access": "public",
    "description": "Symmetric difference of setA and setB",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set} setC - difference difference between setA and setB"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "setB",
        "description": "SetB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "setC - difference difference between setA and setB"
    }
  },
  {
    "kind": "index",
    "content": "# Super\n\n**Types** with superpowers! ðŸ’ª\n\n## Types\n\n*  [SuperObject](https://github.com/clarketm/super/tree/master/packages/superobject#readme) â€“ **Object** with superpowers! ðŸ’ª\n*  [SuperMap](https://github.com/clarketm/super/tree/master/packages/supermap#readme) â€“ **Map** with superpowers! ðŸ’ª\n*  [SuperSet](https://github.com/clarketm/super/tree/master/packages/superset#readme) â€“ **Set** with superpowers! ðŸ’ª\n\n## Packages\n\n*  [babel-preset-super](https://github.com/clarketm/super/tree/master/packages/babel-preset-super#readme) â€“ **Babel preset** with superpowers! ðŸ’ª\n*  [eslint-config-super](https://github.com/clarketm/super/tree/master/packages/eslint-config-super#readme) â€“ **ESLint config** with superpowers! ðŸ’ª\n*  [generator-super](https://github.com/clarketm/super/tree/master/packages/generator-super#readme) â€“ **Yeoman generator** with superpowers! ðŸ’ª\n",
    "longname": "/Users/clarketm/js/super/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]